#ifndef TEXENGINE_BUFFER_TML_INCLUDED
#define TEXENGINE_BUFFER_TML_INCLUDED

#include <new>
#include <cstring>

#ifndef TEXENGINE_BUFFER_HPP_INCLUDED
    #error "buffer.hpp must be included before buffer.tml"
#endif /* TEXENGINE_BUFFER_HPP_INCLUDED */

/*
	NOTES:
	There is no exception handling done in the following operations because 
	it is assumed by principle and in terms of performance that memory management 
	through new and delete operations will never fail. Even if something like that 
	happens, the way this functionality is implemented makes it safe enough to assume 
	minimal to zero impact to the system that uses it.
*/

namespace TEXEngine {
	namespace Util {

template <class T>
Buffer<T>::Buffer()
	: m_count(0), m_data(NULL)
{}

template <class T>
Buffer<T>::Buffer(const Buffer &rhs)
{
	if (&rhs == this)
		return;

	release();
	
	if(init(rhs.count()))
		return;
	
	memcpy(m_data, rhs.data(), m_count * sizeof(T));
	m_count = rhs.count();
}

template <class T>
Buffer<T> &Buffer<T>::operator =(const Buffer<T> &rhs)
{
	if (&rhs == this)
		return *this;

	release();
	
	m_data = NULL;

	if(init(rhs.count())) {
		return *this;
	}

	memcpy(m_data, rhs.data(), m_count * sizeof(T));	
	m_count = rhs.count();

	return *this;
}

template <class T>
Buffer<T>::~Buffer()
{
	release();
}

template <class T>
int Buffer<T>::init(unsigned int count)
{
	// Release previously allocated memory
	release();

	if (!count)
		return 0;

	// Allocate new memory
	m_data = new (std::nothrow) T[count];
	
	if(!m_data)
		return 1; // Something went wrong.

	memset(m_data, 0, count * sizeof(T));
	m_count = count;

	return 0;
}

template <class T>
void Buffer<T>::clear()
{
	release();
}

template <class T>
void Buffer<T>::release()
{
	/* 
		NOTES: 
		1. [ref: init(...)] The std::nothrow version
		   of the new operator returns NULL in case of 
		   failure. Therefore we do not risk memory
		   corruption with the following operations.

		2. delete NULL is perfectly valid according 
		   to the standard.
	*/
	delete[] m_data;

	m_data = NULL;
	m_count = 0;
}

template <class T>
T *Buffer<T>::data() const
{
	return m_data;
}

template <class T>
unsigned int Buffer<T>::count() const
{
	return m_count;
}

	}/* namespace Util */
} /* Namespace TEXEngine */

#endif /* TEXENGINE_BUFFER_TML_INCLUDED */